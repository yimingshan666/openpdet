# -*- coding: utf-8 -*-
"""pointpillar_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-JfLiZ9LVAsZ-z3QngEfvuixIZKKBzGp
"""

# 
!pip install torch==1.8.1+cu111 torchvision==0.9.1+cu111 torchaudio==0.8.1 -f https://download.pytorch.org/whl/torch_stable.html

import torch
torch.__version__

!pip install spconv-cu111
# !pip install spconv
# !pip uninstall spconv-cu102
# !pip install spconv-cu102

# import spconv.pytorch as spconv

import spconv.pytorch as spconv

#  %cd /content/sample_data/

!git clone https://github.com/open-mmlab/OpenPCDet.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/OpenPCDet/

!python setup.py develop

# %cd /content/OpenPCDet/tools/



# Commented out IPython magic to ensure Python compatibility.
## run the test.py and evaluation
# %cd /content/OpenPCDet/

!python -m pcdet.datasets.kitti.kitti_dataset create_kitti_infos tools/cfgs/dataset_configs/kitti_dataset.yaml

# Commented out IPython magic to ensure Python compatibility.
# test.py
# %cd /content/OpenPCDet/tools/

!python test.py --cfg_file /content/OpenPCDet/tools/cfgs/kitti_models/pointpillar.yaml \
                --batch_size 1 \
                --ckpt pointpillar_7728.pth

## evaluation 暂时不用
# 
# !python test.py --cfg_file /content/OpenPCDet/tools/cfgs/kitti_models/pointpillar.yaml \
#                 --batch_size 1 \
#                 --eval_all





# Commented out IPython magic to ensure Python compatibility.
## test the demo.py
# %cd /content/OpenPCDet/tools/

!python demo.py --cfg_file cfgs/kitti_models/pointpillar.yaml \
    --ckpt pointpillar_7728.pth \
    --data_path /content/OpenPCDet/data/kitti/testing/velodyne/000579.bin

# !python demo.py --cfg_file cfgs/kitti_models/second.yaml \
#     --ckpt second_7862.pth \
#     --data_path /content/OpenPCDet/data/kitti/testing

# !python demo.py --cfg_file cfgs/kitti_models/second.yaml \
#     --ckpt second_7862.pth \
#     --data_path /content/OpenPCDet/data/kitti/bin8888.npy

!python -V

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/OpenPCDet/data/

!touch points_test.csv
!touch ref_boxes_test.csv
!touch ref_scores_test.csv
!touch ref_labels_test.csv
!touch data_dict_test.csv
!touch pred_dicts_test.csv

# save all the data to .csv
## add them to demo.py 


            # points=data_dict['points'][:, 1:]
            # ref_boxes=pred_dicts[0]['pred_boxes']
            # ref_scores=pred_dicts[0]['pred_scores']
            # ref_labels=pred_dicts[0]['pred_labels']
            # print(pred_dicts)


            # points = points.data.cpu().numpy()
            # test1 = pd.DataFrame(data=points)  
            # test1.to_csv('/content/OpenPCDet/data/points_test.csv', encoding='gbk')

            # ref_boxes = ref_boxes.data.cpu().numpy()
            # test2 = pd.DataFrame(data=ref_boxes)  
            # test2.to_csv('/content/OpenPCDet/data/ref_boxes_test.csv', encoding='gbk')

            # ref_scores = ref_scores.data.cpu().numpy()
            # test3 = pd.DataFrame(data=ref_scores)  
            # test3.to_csv('/content/OpenPCDet/data/ref_scores_test.csv', encoding='gbk')

            # ref_labels = ref_labels.data.cpu().numpy()
            # test4 = pd.DataFrame(data=ref_labels)  
            # test4.to_csv('/content/OpenPCDet/data/ref_labels_test.csv', encoding='gbk')

# %cd /content/OpenPCDet/tools/

# !python test.py --cfg_file /content/OpenPCDet/tools/cfgs/kitti_models/pointpillar.yaml \
#                 --batch_size 4 \
#                 --ckpt /content/OpenPCDet/checkpoints/pointpillar_7728.pth

# !python test.py --cfg_file /content/OpenPCDet/tools/cfgs/kitti_models/pointpillar.yaml \
#                 # --batch_size 4 \
#                 --eval_all

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/OpenPCDet/